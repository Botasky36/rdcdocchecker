import streamlit as st
from utils.reader import extract_text_from_pdf, extract_text_from_docx
from utils.format_checker import check_format
from utils.readability import check_readability
from utils.structure_summary import summarize_structure

import re
from PIL import Image
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
import base64
from pythainlp.spell import correct

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏´‡∏ô‡πâ‡∏≤
st.set_page_config(page_title="Research Document Checker", layout="wide")

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≠‡∏á‡∏ó‡∏±‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
st.markdown("""
    <style>
        .stApp {
            background-color: #e6f0fa;
        }
        h1, h2, h3, h4 {
            color: #003366;
        }
        .stButton > button {
            background-color: #005580;
            color: white;
            border-radius: 8px;
            font-weight: bold;
        }
        details summary {
            background-color: #cce0f5;
            color: #003366;
            padding: 10px;
            font-size: 18px;
            border-radius: 5px;
        }
        .stMarkdown, .stText, .stSubheader {
            color: #002147;
        }
    </style>
""", unsafe_allow_html=True)

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏®‡∏ß‡∏≠.‡∏ó‡∏≠.
logo = Image.open("logo_rtaf.png")
st.image(logo, width=100)

# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
st.title("üìò ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢")
st.subheader("‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏ô‡πÄ‡πÄ‡∏•‡∏∞‡∏≠‡∏ß‡∏Å‡∏≤‡∏®‡∏Å‡∏≠‡∏á‡∏ó‡∏±‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≥
def remove_extra_spaces(text):
    return re.sub(r'\s{2,}', ' ', text)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
def check_thai_spelling(text):
    words = text.split()
    results = []
    for word in words:
        corrected = correct(word)
        if word != corrected:
            results.append({
                'error_text': word,
                'suggestions': [corrected],
                'message': "‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏™‡∏∞‡∏Å‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
            })
    return results

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
def generate_pdf_report(grammar_results, format_results, readability_results, structure_results):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4
    x = 50
    y = height - 50

    def write_line(text, indent=0, font_size=11):
        nonlocal y
        c.setFont("Helvetica", font_size)
        c.drawString(x + indent, y, text)
        y -= 18
        if y < 50:
            c.showPage()
            y = height - 50

    write_line("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢", font_size=16)
    write_line("-----------------------------------------")

    write_line("üî§ ‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏Å‡∏î‡∏Ñ‡∏≥‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢")
    if grammar_results:
        for item in grammar_results[:10]:
            write_line(f"- ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {item['error_text']}", indent=20)
            write_line(f"  ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞: {', '.join(item['suggestions'])}", indent=40)
            write_line(f"  ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {item['message']}", indent=40)
    else:
        write_line("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

    write_line("")
    write_line("üìê ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")
    for section, result in format_results.items():
        write_line(f"- {section}: {result}", indent=20)

    write_line("")
    write_line("üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô")
    for k, v in readability_results.items():
        write_line(f"- {k}: {v}", indent=20)

    write_line("")
    write_line("üß† ‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")
    for title, content in structure_results.items():
        write_line(f"{title}:", indent=20)
        write_line(content[:300] + "...", indent=40)

    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer

# ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡∏´‡∏£‡∏∑‡∏≠ DOCX", type=["pdf", "docx"])

if uploaded_file:
    if uploaded_file.name.endswith(".pdf"):
        text = extract_text_from_pdf(uploaded_file)
    else:
        text = extract_text_from_docx(uploaded_file)

    st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    cleaned_text = remove_extra_spaces(text)

    with st.expander("üî§ ‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏Å‡∏î‡∏Ñ‡∏≥‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"):
        grammar_results = check_thai_spelling(cleaned_text)
        st.write(f"‡∏û‡∏ö {len(grammar_results)} ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
        for item in grammar_results[:5]:
            st.markdown(f"- ‚ùó {item['error_text']} ‚Üí {item['suggestions'][0]} ({item['message']})")

    with st.expander("üìê ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"):
        format_result = check_format(cleaned_text)
        for section, result in format_result.items():
            st.write(f"- {section}: {result}")

    with st.expander("üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô"):
        readability = check_readability(cleaned_text)
        for k, v in readability.items():
            st.write(f"{k}: {v}")

    with st.expander("üß† ‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"):
        summary = summarize_structure(cleaned_text)
        for title, content in summary.items():
            st.subheader(title)
            st.write(content[:500] + "..." if len(content) > 500 else content)

    # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF
    if st.button("üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏õ‡πá‡∏ô PDF"):
        pdf_buffer = generate_pdf_report(grammar_results, format_result, readability, summary)
        b64 = base64.b64encode(pdf_buffer.read()).decode()
        href = f'<a href="data:application/pdf;base64,{b64}" download="report.pdf">üì• ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</a>'
        st.markdown(href, unsafe_allow_html=True)

# üßæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤
# -------------------------------
st.markdown("""
<hr style="border:1px solid #003366; margin-top:40px; margin-bottom:10px">
<div style="text-align: center; color: #003366; font-size: 14px;">
    üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö<br>
    ‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤: ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢ ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏ß‡∏Å‡∏≤‡∏® ‡∏Å‡∏≠‡∏á‡∏ó‡∏±‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®<br>
    ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: <a href="mailto:piyapan_th@rtaf.mi.th">piyapan_th@rtaf.mi.th</a><br>
    ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: 02-534-4849 
</div>
""", unsafe_allow_html=True)


